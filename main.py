# main.py
from core.scheduler import Scheduler
from core.generator import generate_task, generate_events
from core.event_manager import EventManager
from core.task import ExtendedTask, TaskState
import time
import random


def main():
    NUM_TASKS = 3  # –ö–æ–ª-–≤–æ —Å–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    scheduler = Scheduler()
    event_manager = EventManager()

    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
    tasks = generate_task("Task", NUM_TASKS)

    # 1.5 –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ WAITING
    events = generate_events(tasks)
    used_events = set()

    # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    for task in tasks:
        task_type = type(task).__name__
        print(f"[{task.name} (Type={task_type}, P={task.priority.value})] SUSPENDED -> READY")
        scheduler.add_task(task)

    # 3. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    cycle = 0
    while any(task.state != TaskState.SUSPENDED for task in tasks):
        cycle += 1
        print(f"\nüëâ –¶–∏–∫–ª {cycle}:")
        time.sleep(0.5)

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é
        if not scheduler.running_task or scheduler.running_task.state != TaskState.RUNNING:
            scheduler.run_next()

        current = scheduler.running_task

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ ‚Äî Extended –∏ –Ω–µ –≤ WAITING, –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ—ë
        if current and isinstance(current, ExtendedTask):
            if current.event is not None and not current.waiting_for_event:
                current.wait(current.event)
                scheduler.running_task = None
                continue


        # –ü–æ–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–¥–∞—á–∏
        for event_name, waiting_tasks in events.items():
            still_waiting = [t for t in waiting_tasks if t.state == TaskState.WAITING]
            if still_waiting and event_name not in used_events:
                print(f"üëâ –ü–æ–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ: {event_name}")
                for task in still_waiting:
                    task.release()
                    scheduler.add_task(task)
                used_events.add(event_name)
                break

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ RUNNING
        if current and current.state == TaskState.RUNNING:
            scheduler.terminate_current()
            print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {current.name}")

        time.sleep(0.3)

    print("\n‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –°–∏–º—É–ª—è—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞.")


if __name__ == "__main__":
    main()
